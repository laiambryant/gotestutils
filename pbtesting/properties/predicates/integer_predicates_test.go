package predicates

import "testing"

func TestIntProperties(t *testing.T) {
	assertProp(t, IntMin{Min: 5}, 4, false)
	assertProp(t, IntMin{Min: 5}, 5, true)
	assertProp(t, IntMax{Max: 5}, 6, false)
	assertProp(t, IntMax{Max: 5}, 5, true)
	assertProp(t, IntRange{Min: 3, Max: 5}, 2, false)
	assertProp(t, IntRange{Min: 3, Max: 5}, 3, true)
	assertProp(t, IntRange{Min: 3, Max: 5}, 5, true)
	assertProp(t, IntRange{Min: 3, Max: 5}, 6, false)
	assertProp(t, IntNonZero{Required: true}, 0, false)
	assertProp(t, IntNonZero{Required: true}, 7, true)
	assertProp(t, IntNonZero{Required: false}, 0, true)
	assertProp(t, IntEvenOnly{Enabled: true}, 2, true)
	assertProp(t, IntEvenOnly{Enabled: true}, 3, false)
	assertProp(t, IntEvenOnly{Enabled: false}, 0, true)
	assertProp(t, IntOddOnly{Enabled: true}, 3, true)
	assertProp(t, IntOddOnly{Enabled: true}, 2, false)
	assertProp(t, IntOddOnly{Enabled: false}, 0, true)
	assertProp(t, IntMultipleOf{K: 3}, 6, true)
	assertProp(t, IntMultipleOf{K: 3}, 7, false)
	assertProp(t, IntMultipleOf{K: 0}, 7, true)
	assertProp(t, IntInSet{Values: []int64{1, 2, 3}}, 2, true)
	assertProp(t, IntInSet{Values: []int64{1, 2, 3}}, "a", false)
	assertProp(t, IntNotInSet{Values: []int64{1, 2, 3}}, 2, false)
	assertProp(t, IntNotInSet{Values: []int64{1, 2, 3}}, int8(2), false)
	assertProp(t, IntNotInSet{Values: []int64{1, 2, 3}}, int16(4), true)
	assertProp(t, IntNotInSet{Values: []int64{1, 2, 3}}, int32(4), true)
	assertProp(t, IntNotInSet{Values: []int64{1, 2, 3}}, int64(4), true)
	assertProp(t, IntNotInSet{Values: []int64{1, 2, 3}}, "a", true)
	assertProp(t, IntSigned{AllowNegative: false}, -1, false)
	assertProp(t, IntSigned{AllowNegative: false}, 0, true)
	assertProp(t, IntSigned{AllowNegative: true}, 0, true)
	assertProp(t, IntCanIncludeZero{Allowed: false}, 0, false)
	assertProp(t, IntCanIncludeZero{Allowed: false}, 1, true)
	assertProp(t, IntCanIncludeZero{Allowed: true}, 1, true)

}

func TestUintProperties(t *testing.T) {
	assertProp(t, UintMin{Min: 5}, uint(4), false)
	assertProp(t, UintMin{Min: 5}, int(-1), true)
	assertProp(t, UintMin{Min: 5}, int8(-1), true)
	assertProp(t, UintMin{Min: 5}, int16(-1), true)
	assertProp(t, UintMin{Min: 5}, int32(-1), true)
	assertProp(t, UintMin{Min: 5}, int64(-1), true)
	assertProp(t, UintMin{Min: 5}, uint(5), true)
	assertProp(t, UintMax{Max: 5}, uint(6), false)
	assertProp(t, UintMax{Max: 5}, uint(5), true)
	assertProp(t, UintMax{Max: 5}, "ass", true)
	assertProp(t, UintRange{Min: 3, Max: 5}, uint64(2), false)
	assertProp(t, UintRange{Min: 3, Max: 5}, uint(4), true)
	assertProp(t, UintNonZero{Required: true}, uint(0), false)
	assertProp(t, UintNonZero{Required: true}, uint(7), true)
	assertProp(t, UintNonZero{Required: false}, uint(7), true)
	assertProp(t, UintMultipleOf{K: 4}, uint(8), true)
	assertProp(t, UintMultipleOf{K: 0}, uint64(8), true)
	assertProp(t, UintMultipleOf{K: 4}, uint32(9), false)
	assertProp(t, UintInSet{Values: []uint64{1, 2, 3}}, uint8(2), true)
	assertProp(t, UintInSet{Values: []uint64{1, 2, 3}}, uint16(4), false)
	assertProp(t, UintInSet{Values: []uint64{1, 2, 3}}, int(4), false)
	assertProp(t, UintInSet{Values: []uint64{1, 2, 3}}, "johnny", false)
	assertProp(t, UintNotInSet{Values: []uint64{1, 2, 3}}, "joestar", true)
	assertProp(t, UintNotInSet{Values: []uint64{1, 2, 3}}, int8(2), false)
	assertProp(t, UintNotInSet{Values: []uint64{1, 2, 3}}, int16(2), false)
	assertProp(t, UintNotInSet{Values: []uint64{1, 2, 3}}, int32(4), true)
	assertProp(t, UintCanIncludeZero{Allowed: false}, int64(0), false)
	assertProp(t, UintCanIncludeZero{Allowed: true}, uint(1), true)
}
